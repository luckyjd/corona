<?php

namespace App\Http\Controllers\Backend;

use App\Http\Controllers\Base\BackendController;
use App\Model\Entities\Application;
use App\Model\Entities\Present;
use App\Model\Entities\Shipping;
use App\Model\Entities\User;
use App\Repositories\ApplicationRepository;
use App\Repositories\PresentRepository;
use App\Repositories\WinnerRepository;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Response;

/**
 * Class ApplicationsController
 * @package App\Http\Controllers\Backend
 */
class ApplicationsController extends BackendController
{
    protected $_presentsRepository = null;

    /**
     * @return null
     */
    public function getPresentsRepository()
    {
        return $this->_presentsRepository;
    }

    /**
     * @param null $presentsRepository
     */
    public function setPresentsRepository($presentsRepository)
    {
        $this->_presentsRepository = $presentsRepository;
    }

    /**
     * AdminController constructor.
     * @param ApplicationRepository $repository
     * @param PresentRepository $presentRepository
     */
    public function __construct(ApplicationRepository $repository, PresentRepository $presentRepository)
    {
        parent::__construct();
        $this->setRepository($repository);
        $this->setPresentsRepository($presentRepository);
        $this->setBackUrlDefault('applications.index');
    }

    public function index()
    {
        $this->setViewData(['presents' => $this->getPresentsRepository()->pluck('name', 'id')]);
        return parent::index(); // TODO: Change the autogenerated stub
    }

    /**
     * @return BackendController|\Illuminate\Http\RedirectResponse|void
     */
    public function exportCsv()
    {
        try {
            ini_set('memory_limit', '1024M');
            ini_set('max_execution_time ', 9999999);
            $isWin = getConstant('STATUS_WIN');
            $sql = toSql(DB::table($this->getRepository()->getTable())
                ->select([
                    DB::raw('application_id', 'user_id', 'present_id', 'status'),
                    DB::raw('IF(status = ' . $isWin . ',' . Shipping::getQuaColumn('first_name') . ',' . User::getQuaColumn('first_name') . ') as user_first_name'),
                    DB::raw('IF(status = ' . $isWin . ',' . Shipping::getQuaColumn('last_name') . ',' . User::getQuaColumn('last_name') . ') as user_last_name'),
                    DB::raw('IF(status = ' . $isWin . ',' . Shipping::getQuaColumn('email') . ',' . User::getQuaColumn('email') . ') as user_email'),
                    DB::raw('IF(status = ' . $isWin . ',' . Shipping::getQuaColumn('address') . ',' . User::getQuaColumn('address') . ') as address'),
                    DB::raw('IF(status = ' . $isWin . ',' . Shipping::getQuaColumn('address1') . ',' . User::getQuaColumn('address1') . ') as address1'),
                    DB::raw('IF(status = ' . $isWin . ',' . Shipping::getQuaColumn('zip_code') . ',' . User::getQuaColumn('zip_code') . ') as zip_code'),
                    DB::raw('IF(status = ' . $isWin . ',' . Shipping::getQuaColumn('tel') . ',' . User::getQuaColumn('tel') . ') as tel'),
                    DB::raw('IF(status = ' . $isWin . ',' . Shipping::getQuaColumn('pref_id') . ',' . User::getQuaColumn('pref_id') . ') as pref_id'),
                    DB::raw(Application::getQuaColumn('id').' as user_application_id'),
                    DB::raw(Present::getQuaColumn('name') . ' AS present_name'),
                    DB::raw(Present::getQuaColumn('type') . ' AS present_type'),
                    DB::raw(Shipping::getQuaColumn('store_list') . ' as store_list'),
                ])
                ->join(User::getTableName(), Application::getQuaColumn('user_id'), User::getQuaColumn('id'))
                ->leftJoin(Shipping::getTableName(), Application::getQuaColumn('id'), Shipping::getQuaColumn('application_id'))
                ->join(Present::getTableName(), Application::getQuaColumn('present_id'), Present::getQuaColumn('id'))
                ->orderBy(Application::getQuaColumn('id'), 'DESC'));
            $result = DB::getPdo()->query($sql);
            // export
            $filename = 'tousen' . '_' . date('Ymd') . '.csv';
            $fp = fopen('php://temp', 'r+b');
            fputs($fp, "\xEF\xBB\xBF"); // UTF-8 BOM !!!!!
            $headerFields = [
                'No',
                '名前',
                'ユーザメールアドレス',
                '住所',
                '参加した店舗',
                '電話番号',
                'プレゼント名',
                '応募ポイント(枚数)',
            ];
            fputcsv($fp, $headerFields);
            while ($row = $result->fetch(\PDO::FETCH_ASSOC)) {
                fputcsv($fp, [
                    $row['user_application_id'],
                    $row['user_last_name'] . ' ' . $row['user_first_name'],
                    $row['user_email'],
                    '〒' . $row['zip_code'] . ' ' . getConfig('prefs.' . $row['pref_id']) . ' ' . $row['address'],
                    $row['store_list'],
                    $row['tel'] ? '\'' . $row['tel'] : '',
                    $row['present_name'],
                    getConfig('presents.types.' . $row['present_type']),
                ]);
            }
            rewind($fp);
            $headers = array(
                'Content-Type' => 'text/csv',
                'Content-Disposition' => 'attachment; filename="' . $filename . '"',
            );
            return Response::make(stream_get_contents($fp), 200, $headers);
        } catch (\Exception $e) {
            logError($e->getMessage());
            return $this->_backToStart()->withErrors(trans('messages.failed'));
        }
    }
}
