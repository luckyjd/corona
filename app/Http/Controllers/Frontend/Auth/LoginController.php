<?php

namespace App\Http\Controllers\Frontend\Auth;

use App\Http\Controllers\Base\FrontendController;
use App\Repositories\SocialLoginProfileRepository;
use App\Repositories\UserRepository;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Facades\Input;
use Laravel\Socialite\Facades\Socialite;

/**
 * Class LoginController
 * @package App\Http\Controllers\Frontend\Auth
 */
class LoginController extends FrontendController
{
    protected $_area = 'frontend';

    protected $_socialLoginProfileRepository = null;

    /**
     * @return null
     */
    public function getSocialLoginProfileRepository()
    {
        return $this->_socialLoginProfileRepository;
    }

    /**
     * @param null $socialLoginProfileRepository
     */
    public function setSocialLoginProfileRepository($socialLoginProfileRepository)
    {
        $this->_socialLoginProfileRepository = $socialLoginProfileRepository;
    }

    /**
     * LoginController constructor.
     * @param UserRepository $userRepository
     * @param SocialLoginProfileRepository $socialLoginProfileRepository
     */
    public function __construct(UserRepository $userRepository, SocialLoginProfileRepository $socialLoginProfileRepository)
    {
        $this->setRepository($userRepository);
        $this->setSocialLoginProfileRepository($socialLoginProfileRepository);
        parent::__construct();
        Config::set('services.facebook.redirect', url(Config::get('services.facebook.redirect')));
        Config::set('services.google.redirect', url(Config::get('services.google.redirect')));
        Config::set('services.twitter.redirect', url(Config::get('services.twitter.redirect')));
        $this->middleware('guest', ['except' => array('logout', 'register')]);
    }

    public function showLoginForm()
    {
        if(frontendGuard()->check()){
            return $this->_redirectToHome();
        }

        $isShowRegisterDialog = false;
        $loginSocialId = Session::get('login_social_id');
        $fromSocial = Input::get('from_social'); // facebook/google/twitter - only first time
        if (!$fromSocial){
            if ($loginSocialId){
                Session::forget('login_social_id');
            }
        }else{
            if (!$loginSocialId){
                return $this->_toRoute('frontend.login', [])->withErrors(trans('messages.failed'));
            }
            $isShowRegisterDialog = true;
        }
        $this->setViewData(['isShowRegisterDialog' => $isShowRegisterDialog]);
        $this->setEntity($this->_findOrNewEntity());
        return $this->render('frontend.auth.login');
    }

    public function login()
    {
        $validator = $this->getRepository()->getValidator();
        if (!$validator->validateLogin(Input::all())) {
            $this->setOk(false);
            $this->setMessage($validator->errors());
            return $this->renderJson();
        }

        $userData = array(
            'email' => Input::get('email'),
            'password' => Input::get('password')
        );

        if (frontendGuard()->attempt($userData)) {
            return $this->renderJson();
        }
        $errors = trans('auth.email_password_invalid');

        $this->setOk(false);
        $this->setMessage($errors);
        return $this->renderJson();
    }
public function flashError($message)
{
    parent::flashError($message); // TODO: Change the autogenerated stub
}

    public function logout()
    {
        frontendGuard()->logout();
        return $this->_to('/');
    }

    public function loginFacebook()
    {
        return Socialite::driver('facebook')->redirect();
    }

    public function loginFacebookCallback()
    {
        try {
            $auth = Socialite::driver('facebook')
                ->fields(array('id', 'first_name', 'last_name', 'name', 'email', 'gender', 'verified', 'link'))
                ->user();
            if (empty($auth->user)) {
                return redirect(route('auth.login'))->withErrors(trans('auth.email_password_invalid'));
            }
            $data = [
                'email' => $auth->email,
                'first_name' => !empty($auth->user['first_name']) ? $auth->user['first_name'] : '',
                'last_name' => !empty($auth->user['last_name']) ? $auth->user['last_name'] : '',
                'facebook_id' => $auth->id,
            ];
            return $this->_checkUserSocial($data, 'facebook');
        } catch (\Exception $exception) {
            logError($exception);
            return redirect(route('home'))->withErrors(trans('auth.email_password_invalid'));
        }
    }

    public function loginGoogle()
    {
        return Socialite::driver('google')->redirect();
    }

    public function loginGoogleCallback()
    {
        try {
            $auth = Socialite::driver('google')->user();
            if (empty($auth->user) || empty($auth->email)) {
                return redirect(route('auth.login'))->withErrors(trans('auth.email_password_invalid'));
            }
            $data = [
                'email' => $auth->email,
                'first_name' => !empty($auth->user['name']) && !empty($auth->user['name']['familyName']) ? $auth->user['name']['familyName'] : '',
                'last_name' => !empty($auth->user['name']) && !empty($auth->user['name']['last_name']) ? $auth->user['name']['last_name'] : '',
                'google_id' => $auth->id,
            ];
            return $this->_checkUserSocial($data, 'google');
        } catch (\Exception $exception) {
            logError($exception);
            return redirect(route('home'))->withErrors(trans('auth.email_password_invalid'));
        }
    }

    public function loginTwitter()
    {
        return Socialite::driver('twitter')->redirect();
    }

    public function loginTwitterCallback()
    {
        try {
            $auth = Socialite::driver('twitter')->user();
            if (empty($auth->user) || empty($auth->email)) {
                return redirect(route('auth.login'))->withErrors(trans('auth.email_password_invalid'));
            }
            // twitter not return first name and last name
            $data = [
                'email' => $auth->email,
                'twitter_id' => $auth->id,
            ];
            return $this->_checkUserSocial($data, 'twitter');
        } catch (\Exception $exception) {
            logError($exception);
            return redirect(route('home'))->withErrors(trans('auth.email_password_invalid'));
        }
    }

    protected function _checkUserSocial($data, $socialName)
    {
        $socialField = $socialName . '_id';
        $socialId = $data[$socialField];
        $data['email'] = !empty($data['email']) ? $data['email'] : $socialName . '_' . $data[$socialField] . '@gmail.com';
        $user = $this->getRepository()->firstOrNew(array('email' => $data['email']));
        if (!$user->exists) { // create user with social information
            // redirect to create user with social information
            if(getConfig('social.login.show_popup_register_mode') == 'on'){
                Session::put('login_social_id', [$socialField => $socialId]);
                unset($data[$socialField]); // hidden social_id
                return $this->_toRoute('home', [])->withInput(array_merge($data, array('from_social' => $socialName)));
            }
            // insert and login
            DB::beginTransaction();
            try {
                $data['password'] = substr(str_shuffle($socialName.$socialId), 1);
                $user->fill($data);
                $user->save();
                // save social_login_profiles
                $socialField = $socialName . '_id';
                $userSocial = $this->getSocialLoginProfileRepository()->firstOrNew(array('user_id' => $user->id, $socialField => $socialId));
                $userSocial->save();
                $this->_saveRelations($user);
                DB::commit();
                // login
                if (!frontendGuard()->loginUsingId($user->id)) {
                    return $this->_toRoute('home', [])->withInput(['isld' => true])->withErrors(trans('auth.email_password_invalid'));
                }
                // redirect my page
                return $this->_to('/my-page');
            } catch (\Exception $e) {
                logError($e);
                $this->_removeMediaFile(isset($user) ? $user : null);
                DB::rollBack();
            }
        }
        // find in social_login_profile
        $userSocial = $this->getSocialLoginProfileRepository()->firstOrNew(array('user_id' => $user->id));
        if (!$userSocial->exists) {
            // is normal user
            return $this->_toRoute('home', [])->withInput(['isld' => true])->withErrors(trans('messages.email_exist'));
        }

        if ($userSocial->getAttribute($socialField) == $socialId){
            // login
            if (!frontendGuard()->loginUsingId($user->id)) {
                return $this->_toRoute('home', [])->withInput(['isld' => true])->withErrors(trans('auth.email_password_invalid'));
            }
            // redirect my page
            return $this->_to('/my-page');
        }else {
            return $this->_toRoute('home', [])->withInput(['isld' => true])->withErrors(trans('messages.email_exist'));
        }
    }


}
