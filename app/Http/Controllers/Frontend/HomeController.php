<?php

namespace App\Http\Controllers\Frontend;

use App\Http\Controllers\Base\FrontendController;
use App\Http\Supports\RepositoryUtil;
use App\Repositories\PresentRepository;
use App\Repositories\SerialNumberRepository;
use App\Repositories\UserRepository;
use Carbon\Carbon;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Input;

class HomeController extends FrontendController
{
    use RepositoryUtil;

    protected $_userRepository;

    /**
     * @return mixed
     */
    public function getUserRepository()
    {
        return $this->_userRepository;
    }

    /**
     * @param mixed $userRepository
     */
    public function setUserRepository($userRepository)
    {
        $this->_userRepository = $userRepository;
    }

    public function __construct(
        PresentRepository $repository,
        SerialNumberRepository $serialNumberRepository,
        UserRepository $userRepository
    )
    {
        $this->setRepository($repository);
        $this->setUserRepository($userRepository);

        parent::__construct();
        $this->registerRepository($serialNumberRepository);
    }

    public function index()
    {
        $viewData = [
            'presentsOnePt' => $this->getRepository()->getPresentsOnePtForFrontend(),
            'presentsFivePt' => $this->getRepository()->getPresentsFivePtForFrontend(),
            '_isShowLoginDialog' => $this->_isShowLoginDialog(),
            '_isShowRegisterDialog' => $this->_isShowRegisterDialog(),
            '_isShowRequestResetPasswordDialog' => $this->_isShowRequestResetPasswordDialog(),
            '_tokenShowResetPasswordDialog' => $this->_isShowResetPasswordDialog()
        ];

        if (session()
            ->get('login_dialog')){
            $this->setViewData(['showModal'=>true]);
            session()->forget('login_dialog');
        }else{
            if (session()->has('serial')) {
                return $this->_autoApplySerialAfterLogin();
            }
        }

        $this->setViewData($viewData);
        return parent::index(); // TODO: Change the autogenerated stub
    }

    protected function _isShowRegisterDialog(){
        $isShowRegisterDialog = false;
        $loginSocialId = session()->get('login_social_id');
        $fromSocial = Input::old('from_social'); // facebook/google/twitter - only first time
        if (!$fromSocial){
            if ($loginSocialId){
                session()->forget('login_social_id');
            }
        }else{
            if (!$loginSocialId){
                return $this->_toRoute('home', [])->withErrors(trans('messages.failed'));
            }
            $isShowRegisterDialog = true;
        }
        return $isShowRegisterDialog;
    }

    protected function _isShowLoginDialog(){
        return Input::old('isld') ? true : false;
    }

    protected function _isShowRequestResetPasswordDialog(){
        return Input::old('isrrpd') ? true : false;
    }

    protected function _isShowResetPasswordDialog(){
        $isrpd = Input::old('isrpd');
        $_token = Input::old('_token_rp');
        return  $isrpd && $_token ? $_token : false;
    }

    public function showResetPasswordDialog($hash)
    {
        if (frontendGuard()->check()) {
            return $this->_toRoute('home');
        }
        if (!$hash) {
            return $this->_toRoute('home', [])->withInput(['isld' => true])->withErrors(trans('messages.failed'));
        }
        try {
            list($email, $time) = $this->_parseParams($hash);
            $entity = $this->_checkUserResetPassword($email, $time);
            if (empty($entity)) {
                return $this->_toRoute('home',[])->withInput(['isld' => true])->withErrors(trans('messages.failed'));
            }
            return $this->_toRoute('home',[])->withInput(['isrpd' => true, '_token_rp' => $hash]);
        } catch (\Exception $exception) {
            logError($exception->getMessage());
        }
    }

    protected function _parseParams($hash)
    {
        $hash = decrypt($hash);
        $hash = explode(getConstant('RESET_PASSWORD_PREFIX'), $hash);
        $email = array_get($hash, 0);
        $time = array_get($hash, 1);
        return [$email, $time];
    }

    protected function _checkUserResetPassword($email, $time)
    {
        if (!$email || !$time) {
            return false;
        }
        $time = Carbon::parse($time);
        $now = Carbon::now();
        $lengthOfAd = $time->diffInMinutes($now);
        if ($lengthOfAd > getConstant('RESET_PASSWORD_TIMEOUT')) {
            return false;
        }
        $entity = $this->getUserRepository()->where('email', $email)->first();
        if (empty($entity)) {
            return false;
        }
        return $entity;
    }
}
